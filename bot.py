import json

import telebot
from telebot import types

from config import token
from helper import get_distance

step = {}

bot = telebot.TeleBot(token)

data = open('static/points.json')
points = json.load(data)

print(len(points))

location_button = types.KeyboardButton(text="Send location", request_location=True)
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard.add(location_button)

@bot.message_handler(func=lambda message: True, commands=['near'])
def get_nearests(message):
    if step.get(message.chat.id, None) is None:
        msg = bot.send_message(message.chat.id, text="–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.", reply_markup=keyboard, parse_mode="Markdown")
        step[message.chat.id] = 0
        bot.register_next_step_handler(msg, get_nearests)
    else:
        if message.location is None:
            msg = bot.send_message(message.chat.id,
                                   "*–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.*",
                                   parse_mode="Markdown")
            bot.register_next_step_handler(msg, get_nearests)

        #bot.send_chat_action(message.chat.id, "–∏—â—É –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏")
        sorted_points = sorted(points, key=lambda point: get_distance(message.location.longitude,
                                                      message.location.latitude,
                                                      point['longitude'],
                                                      point['latitude']))

        inline_keyboard = types.InlineKeyboardMarkup()
        for point in sorted_points[:10]:
            inline_keyboard.add(types.InlineKeyboardButton(text="{0} - {1}".format(point['name'], point['category']),
                                                           callback_data=str(point['id'])))
        bot.send_message(message.chat.id, text="–û—Ç–ª–∏—á–Ω–æ!", reply_markup=inline_keyboard)
        bot.send_message(message.chat.id, text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ 10 –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫ Senim üìç", reply_markup=types.ReplyKeyboardRemove())
        step[message.chat.id] = None

@bot.message_handler(func=lambda message: True, commands=['nearc'])
def get_nearests_ctg(message):
    if step.get(message.chat.id, None) is None:
        msg = bot.send_message(message.chat.id, text="–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.", reply_markup=keyboard, parse_mode="Markdown")
        step[message.chat.id] = 0
        bot.register_next_step_handler(msg, get_nearests)
    else:
        if message.location is None:
            msg = bot.send_message(message.chat.id,
                                   "*–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.*",
                                   parse_mode="Markdown")
            bot.register_next_step_handler(msg, get_nearests)

        #bot.send_chat_action(message.chat.id, "–∏—â—É –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏")
        sorted_points = sorted(points, key=lambda point: get_distance(message.location.longitude,
                                                      message.location.latitude,
                                                      point['longitude'],
                                                      point['latitude']))

        inline_keyboard = types.InlineKeyboardMarkup()
        for point in sorted_points[:10]:
            inline_keyboard.add(types.InlineKeyboardButton(text="{0} - {1}".format(point['name'], point['category']),
                                                           callback_data=str(point['id'])))
        bot.send_message(message.chat.id, text="–û—Ç–ª–∏—á–Ω–æ!", reply_markup=inline_keyboard)
        bot.send_message(message.chat.id, text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ 10 –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫ Senim üìç", reply_markup=types.ReplyKeyboardRemove())
        step[message.chat.id] = None

@bot.message_handler(func=lambda message: True, commands=['ask'])
def ask(message):
    pass

@bot.message_handler(func=lambda message: True, commands=['help'])
def help(message):
    pass

@bot.message_handler(func=lambda message: True, commands=['about'])
def about(message):
    pass


@bot.message_handler(func=lambda message: True, content_types=['text'])
def echo_message(message):
    bot.reply_to(message,message.text)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        print(call.data)


bot.polling(none_stop=True)

'''
/near - –ü—Ä–∏—Å—ã–ª–∞—Ç—å 10 –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫ Senim. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—É—Ç–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ø–Ω–¥–µ–∫—Å/Google –∫–∞—Ä—Ç.
/nearc - –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ 10 —Ç–æ—á–µ–∫ –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—É—Ç–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ø–Ω–¥–µ–∫—Å/Google –∫–∞—Ä—Ç.
/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –î–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º. –î—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
/help - –≤—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ
/about - –≤—ã–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ. –í–∑—è—Ç—å –Ω–∞ senim.kz
–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –§–∞–π–ª points.json
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
/near - –ü—Ä–∏—Å—ã–ª–∞—Ç—å 10 –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫ Senim. 
/nearc - –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ 10 —Ç–æ—á–µ–∫ –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. 
/ask - –æ—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ
/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ.

'''